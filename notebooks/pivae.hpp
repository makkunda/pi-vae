
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace pivae_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 49> locations_array__ = 
{" (found before start of program)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 29, column 2 to column 14)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 30, column 2 to column 23)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 33, column 2 to column 21)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 34, column 2 to column 18)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 35, column 2 to column 42)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 36, column 2 to column 20)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 44, column 2 to column 15)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 46, column 4 to column 41)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 45, column 2 to line 46, column 41)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 39, column 2 to column 18)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 40, column 2 to column 24)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 41, column 2 to column 45)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 10, column 2 to column 8)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 11, column 2 to column 9)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 12, column 2 to column 9)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 13, column 2 to column 8)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 14, column 2 to column 15)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 15, column 9 to column 10)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 15, column 11 to column 13)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 15, column 2 to column 18)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 16, column 9 to column 11)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 16, column 2 to column 16)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 17, column 9 to column 11)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 17, column 12 to column 14)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 17, column 2 to column 19)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 18, column 9 to column 11)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 18, column 2 to column 16)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 19, column 9 to column 11)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 19, column 12 to column 20)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 19, column 2 to column 25)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 20, column 9 to column 17)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 20, column 2 to column 22)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 23, column 9 to column 10)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 23, column 11 to column 19)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 23, column 2 to column 27)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 24, column 9 to column 10)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 24, column 2 to column 14)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 25, column 2 to column 13)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 26, column 14 to column 20)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 26, column 2 to column 22)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 29, column 9 to column 10)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 33, column 9 to column 17)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 34, column 9 to column 10)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 44, column 9 to column 10)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 3, column 4 to column 44)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 2, column 45 to line 4, column 3)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 6, column 4 to column 69)",
 " (in '/home/shug7409/projects/cpi-vae/notebooks/pivae.stan', line 5, column 104 to line 7, column 3)"};

struct generator_stan_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_eigen_matrix_dynamic<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_eigen_matrix_dynamic<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_eigen_matrix_dynamic<T3__>,
                                stan::is_vt_not_complex<T3__>,
                                stan::is_col_vector<T4__>,
                                stan::is_vt_not_complex<T4__>,
                                stan::is_col_vector<T5__>,
                                stan::is_vt_not_complex<T5__>,
                                stan::is_col_vector<T6__>,
                                stan::is_vt_not_complex<T6__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                       stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                       stan::base_type_t<T4__>,
                       stan::promote_args_t<stan::base_type_t<T5__>,
                                            stan::base_type_t<T6__>>>, -1, 1>
  operator()(const T0__& input, const T1__& W1, const T2__& W2, const T3__& W3,
             const T4__& B1, const T5__& B2, const T6__& B3,
             std::ostream* pstream__) const;
};
struct layer_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_eigen_matrix_dynamic<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                       stan::base_type_t<T2__>>, -1, 1>
  operator()(const T0__& x, const T1__& W, const T2__& B,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>>, -1, 1>
  layer(const T0__& x_arg__, const T1__& W_arg__, const T2__& B_arg__,
        std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>>;
    int current_statement__ = 0; 
    const auto& x = stan::math::to_ref(x_arg__);
    const auto& W = stan::math::to_ref(W_arg__);
    const auto& B = stan::math::to_ref(B_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 45;
      return stan::math::add(
               stan::math::transpose(
                 stan::math::multiply(stan::math::transpose(x), W)), B);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                     stan::base_type_t<T4__>,
                     stan::promote_args_t<stan::base_type_t<T5__>,
                                          stan::base_type_t<T6__>>>, -1, 1>
  generator_stan(const T0__& input_arg__, const T1__& W1_arg__,
                 const T2__& W2_arg__, const T3__& W3_arg__,
                 const T4__& B1_arg__, const T5__& B2_arg__,
                 const T6__& B3_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>,
                                 stan::base_type_t<T3__>,
                                 stan::base_type_t<T4__>,
                                 stan::promote_args_t<stan::base_type_t<T5__>,
                                                      stan::base_type_t<T6__>>>;
    int current_statement__ = 0; 
    const auto& input = stan::math::to_ref(input_arg__);
    const auto& W1 = stan::math::to_ref(W1_arg__);
    const auto& W2 = stan::math::to_ref(W2_arg__);
    const auto& W3 = stan::math::to_ref(W3_arg__);
    const auto& B1 = stan::math::to_ref(B1_arg__);
    const auto& B2 = stan::math::to_ref(B2_arg__);
    const auto& B3 = stan::math::to_ref(B3_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 47;
      return layer(
               stan::math::tanh(
                 layer(stan::math::tanh(layer(input, W1, B1, pstream__)), W2,
                   B2, pstream__)), W3, B3, pstream__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                     stan::base_type_t<T4__>,
                     stan::promote_args_t<stan::base_type_t<T5__>,
                                          stan::base_type_t<T6__>>>, -1, 1>
generator_stan_functor__::operator()(const T0__& input, const T1__& W1,
                                     const T2__& W2, const T3__& W3,
                                     const T4__& B1, const T5__& B2,
                                     const T6__& B3, std::ostream* pstream__) 
const
{
  return generator_stan(input, W1, W2, W3, B1, B2, B3, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>>, -1, 1>
layer_functor__::operator()(const T0__& x, const T1__& W, const T2__& B,
                            std::ostream* pstream__)  const
{
  return layer(x, W, B, pstream__);
}

 class pivae_model final : public model_base_crtp<pivae_model> {

 private:
  int p;
  int p1;
  int p2;
  int n;
  int beta_dim;
  Eigen::Matrix<double, -1, -1> W1_data__;
  Eigen::Matrix<double, -1, 1> B1_data__;
  Eigen::Matrix<double, -1, -1> W2_data__;
  Eigen::Matrix<double, -1, 1> B2_data__;
  Eigen::Matrix<double, -1, -1> W3_data__;
  Eigen::Matrix<double, -1, 1> B3_data__;
  Eigen::Matrix<double, -1, -1> phi_x_data__;
  Eigen::Matrix<double, -1, 1> y_data__;
  int ll_len;
  std::vector<int> ll_idxs; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> W1{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> B1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> W2{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> B2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> W3{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> B3{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> phi_x{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
 
 public:
  ~pivae_model() { }
  
  inline std::string model_name() const final { return "pivae_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  pivae_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "pivae_model_namespace::pivae_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 13;
      context__.validate_dims("data initialization","p","int",
           std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      
      
      current_statement__ = 13;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 14;
      context__.validate_dims("data initialization","p1","int",
           std::vector<size_t>{});
      p1 = std::numeric_limits<int>::min();
      
      
      current_statement__ = 14;
      p1 = context__.vals_i("p1")[(1 - 1)];
      current_statement__ = 15;
      context__.validate_dims("data initialization","p2","int",
           std::vector<size_t>{});
      p2 = std::numeric_limits<int>::min();
      
      
      current_statement__ = 15;
      p2 = context__.vals_i("p2")[(1 - 1)];
      current_statement__ = 16;
      context__.validate_dims("data initialization","n","int",
           std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      
      
      current_statement__ = 16;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 17;
      context__.validate_dims("data initialization","beta_dim","int",
           std::vector<size_t>{});
      beta_dim = std::numeric_limits<int>::min();
      
      
      current_statement__ = 17;
      beta_dim = context__.vals_i("beta_dim")[(1 - 1)];
      current_statement__ = 18;
      stan::math::validate_non_negative_index("W1", "p", p);
      current_statement__ = 19;
      stan::math::validate_non_negative_index("W1", "p1", p1);
      current_statement__ = 20;
      context__.validate_dims("data initialization","W1","double",
           std::vector<size_t>{static_cast<size_t>(p),
            static_cast<size_t>(p1)});
      W1_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(p, p1,
          std::numeric_limits<double>::quiet_NaN());
      new (&W1) Eigen::Map<Eigen::Matrix<double, -1, -1>>(W1_data__.data(), p, p1);
        
      
      {
        std::vector<local_scalar_t__> W1_flat__;
        current_statement__ = 20;
        W1_flat__ = context__.vals_r("W1");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= p1; ++sym1__) {
          current_statement__ = 20;
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            current_statement__ = 20;
            stan::model::assign(W1, W1_flat__[(pos__ - 1)],
              "assigning variable W1", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
            current_statement__ = 20;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 21;
      stan::math::validate_non_negative_index("B1", "p1", p1);
      current_statement__ = 22;
      context__.validate_dims("data initialization","B1","double",
           std::vector<size_t>{static_cast<size_t>(p1)});
      B1_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(p1,
          std::numeric_limits<double>::quiet_NaN());
      new (&B1) Eigen::Map<Eigen::Matrix<double, -1, 1>>(B1_data__.data(), p1);
        
      
      {
        std::vector<local_scalar_t__> B1_flat__;
        current_statement__ = 22;
        B1_flat__ = context__.vals_r("B1");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= p1; ++sym1__) {
          current_statement__ = 22;
          stan::model::assign(B1, B1_flat__[(pos__ - 1)],
            "assigning variable B1", stan::model::index_uni(sym1__));
          current_statement__ = 22;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 23;
      stan::math::validate_non_negative_index("W2", "p1", p1);
      current_statement__ = 24;
      stan::math::validate_non_negative_index("W2", "p2", p2);
      current_statement__ = 25;
      context__.validate_dims("data initialization","W2","double",
           std::vector<size_t>{static_cast<size_t>(p1),
            static_cast<size_t>(p2)});
      W2_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(p1, p2,
          std::numeric_limits<double>::quiet_NaN());
      new (&W2) Eigen::Map<Eigen::Matrix<double, -1, -1>>(W2_data__.data(), p1, p2);
        
      
      {
        std::vector<local_scalar_t__> W2_flat__;
        current_statement__ = 25;
        W2_flat__ = context__.vals_r("W2");
        current_statement__ = 25;
        pos__ = 1;
        current_statement__ = 25;
        for (int sym1__ = 1; sym1__ <= p2; ++sym1__) {
          current_statement__ = 25;
          for (int sym2__ = 1; sym2__ <= p1; ++sym2__) {
            current_statement__ = 25;
            stan::model::assign(W2, W2_flat__[(pos__ - 1)],
              "assigning variable W2", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
            current_statement__ = 25;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 26;
      stan::math::validate_non_negative_index("B2", "p2", p2);
      current_statement__ = 27;
      context__.validate_dims("data initialization","B2","double",
           std::vector<size_t>{static_cast<size_t>(p2)});
      B2_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(p2,
          std::numeric_limits<double>::quiet_NaN());
      new (&B2) Eigen::Map<Eigen::Matrix<double, -1, 1>>(B2_data__.data(), p2);
        
      
      {
        std::vector<local_scalar_t__> B2_flat__;
        current_statement__ = 27;
        B2_flat__ = context__.vals_r("B2");
        current_statement__ = 27;
        pos__ = 1;
        current_statement__ = 27;
        for (int sym1__ = 1; sym1__ <= p2; ++sym1__) {
          current_statement__ = 27;
          stan::model::assign(B2, B2_flat__[(pos__ - 1)],
            "assigning variable B2", stan::model::index_uni(sym1__));
          current_statement__ = 27;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 28;
      stan::math::validate_non_negative_index("W3", "p2", p2);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("W3", "beta_dim", beta_dim);
      current_statement__ = 30;
      context__.validate_dims("data initialization","W3","double",
           std::vector<size_t>{static_cast<size_t>(p2),
            static_cast<size_t>(beta_dim)});
      W3_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(p2, beta_dim,
          std::numeric_limits<double>::quiet_NaN());
      new (&W3) Eigen::Map<Eigen::Matrix<double, -1, -1>>(W3_data__.data(), p2, beta_dim);
        
      
      {
        std::vector<local_scalar_t__> W3_flat__;
        current_statement__ = 30;
        W3_flat__ = context__.vals_r("W3");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= beta_dim; ++sym1__) {
          current_statement__ = 30;
          for (int sym2__ = 1; sym2__ <= p2; ++sym2__) {
            current_statement__ = 30;
            stan::model::assign(W3, W3_flat__[(pos__ - 1)],
              "assigning variable W3", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
            current_statement__ = 30;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 31;
      stan::math::validate_non_negative_index("B3", "beta_dim", beta_dim);
      current_statement__ = 32;
      context__.validate_dims("data initialization","B3","double",
           std::vector<size_t>{static_cast<size_t>(beta_dim)});
      B3_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(beta_dim,
          std::numeric_limits<double>::quiet_NaN());
      new (&B3) Eigen::Map<Eigen::Matrix<double, -1, 1>>(B3_data__.data(), beta_dim);
        
      
      {
        std::vector<local_scalar_t__> B3_flat__;
        current_statement__ = 32;
        B3_flat__ = context__.vals_r("B3");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= beta_dim; ++sym1__) {
          current_statement__ = 32;
          stan::model::assign(B3, B3_flat__[(pos__ - 1)],
            "assigning variable B3", stan::model::index_uni(sym1__));
          current_statement__ = 32;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 33;
      stan::math::validate_non_negative_index("phi_x", "n", n);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("phi_x", "beta_dim", beta_dim);
      current_statement__ = 35;
      context__.validate_dims("data initialization","phi_x","double",
           std::vector<size_t>{static_cast<size_t>(n),
            static_cast<size_t>(beta_dim)});
      phi_x_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(n, beta_dim,
          std::numeric_limits<double>::quiet_NaN());
      new (&phi_x) Eigen::Map<Eigen::Matrix<double, -1, -1>>(phi_x_data__.data(), n, beta_dim);
        
      
      {
        std::vector<local_scalar_t__> phi_x_flat__;
        current_statement__ = 35;
        phi_x_flat__ = context__.vals_r("phi_x");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= beta_dim; ++sym1__) {
          current_statement__ = 35;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 35;
            stan::model::assign(phi_x, phi_x_flat__[(pos__ - 1)],
              "assigning variable phi_x", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
            current_statement__ = 35;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 36;
      stan::math::validate_non_negative_index("y", "n", n);
      current_statement__ = 37;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(n)});
      y_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_data__.data(), n);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 37;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 37;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 37;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 38;
      context__.validate_dims("data initialization","ll_len","int",
           std::vector<size_t>{});
      ll_len = std::numeric_limits<int>::min();
      
      
      current_statement__ = 38;
      ll_len = context__.vals_i("ll_len")[(1 - 1)];
      current_statement__ = 39;
      stan::math::validate_non_negative_index("ll_idxs", "ll_len", ll_len);
      current_statement__ = 40;
      context__.validate_dims("data initialization","ll_idxs","int",
           std::vector<size_t>{static_cast<size_t>(ll_len)});
      ll_idxs = std::vector<int>(ll_len, std::numeric_limits<int>::min());
      
      
      current_statement__ = 40;
      ll_idxs = context__.vals_i("ll_idxs");
      current_statement__ = 41;
      stan::math::validate_non_negative_index("z", "p", p);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("f", "beta_dim", beta_dim);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("y_hat", "n", n);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("y2", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = p + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "pivae_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> z =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 1;
      z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(p);
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      current_statement__ = 2;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> f =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(beta_dim,
           DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_hat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(f,
        generator_stan(z, W1, W2, W3, B1, B2, B3, pstream__),
        "assigning variable f");
      current_statement__ = 6;
      stan::model::assign(y_hat, stan::math::multiply(phi_x, f),
        "assigning variable y_hat");
      {
        current_statement__ = 10;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z, 0, 1));
        current_statement__ = 11;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma2, 0, 10));
        current_statement__ = 12;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(y, "y", stan::model::index_multi(ll_idxs)),
            stan::model::rvalue(y_hat, "y_hat",
              stan::model::index_multi(ll_idxs)), sigma2));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "pivae_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> z =
         Eigen::Matrix<double, -1, 1>::Constant(p,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(p);
      double sigma2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      Eigen::Matrix<double, -1, 1> f =
         Eigen::Matrix<double, -1, 1>::Constant(beta_dim,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> y_hat =
         Eigen::Matrix<double, -1, 1>::Constant(n,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(z);
      out__.write(sigma2);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      stan::model::assign(f,
        generator_stan(z, W1, W2, W3, B1, B2, B3, pstream__),
        "assigning variable f");
      current_statement__ = 6;
      stan::model::assign(y_hat, stan::math::multiply(phi_x, f),
        "assigning variable y_hat");
      if (emit_transformed_parameters__) {
        out__.write(f);
        out__.write(y_hat);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> y2 =
         Eigen::Matrix<double, -1, 1>::Constant(n,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 8;
        stan::model::assign(y2,
          stan::math::normal_rng(
            stan::model::rvalue(y_hat, "y_hat", stan::model::index_uni(i)),
            sigma2, base_rng__),
          "assigning variable y2", stan::model::index_uni(i));
      }
      out__.write(y2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> z =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(p, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        stan::model::assign(z, in__.read<local_scalar_t__>(),
          "assigning variable z", stan::model::index_uni(sym1__));
      }
      out__.write(z);
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      sigma2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"z", "sigma2", "f", "y_hat", "y2"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(p)
                                                                   },
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(beta_dim)},
      std::vector<size_t>{static_cast<size_t>(n)},
      std::vector<size_t>{static_cast<size_t>(n)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma2");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= beta_dim; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma2");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= beta_dim; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_dim) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_dim) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (p + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (beta_dim + n);
      const size_t num_gen_quantities = emit_generated_quantities * n;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (p + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (beta_dim + n);
      const size_t num_gen_quantities = emit_generated_quantities * n;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 2> names__{"z", "sigma2"};
      const std::array<Eigen::Index, 2> constrain_param_sizes__{p, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = pivae_model_namespace::pivae_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return pivae_model_namespace::profiles__;
}

#endif


